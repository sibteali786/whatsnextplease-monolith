name: Deploy to Production (with Migrations)

on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**'
      - 'apps/web/prisma/migrations/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-production.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/backend/**'
      - 'apps/web/prisma/migrations/**'
      - 'Dockerfile'
    types: [closed]

concurrency:
  group: production-deployment
  cancel-in-progress: true

jobs:
  # First job: Run database migrations
  migrations:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run backend migrations
        working-directory: ./apps/backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run frontend migrations
        working-directory: ./apps/web
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Notify migrations complete
        run: echo "✅ Database migrations completed successfully"

  # Second job: Deploy to production (depends on migrations)
  deploy-production:
    needs: migrations
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get ECR Repository URI
        id: ecr-repo
        run: |
          STACK_NAME="WnpBackendStack-production"
          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?ExportName=='ECRRepositoryURI-production'].OutputValue" \
            --output text)

          if [ -z "$ECR_REPO" ]; then
            echo "Error: Could not retrieve ECR repository URL"
            exit 1
          fi

          echo "repository=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "Using ECR repository: $ECR_REPO"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Create environment-specific .env file for Docker build
        run: |
          cd apps/backend
          echo "${{ secrets.ENV_PRODUCTION }}" > .env
          echo "✅ Production environment file created with $(wc -l < .env) lines"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          platforms: linux/amd64
          tags: |
            ${{ steps.ecr-repo.outputs.repository }}:latest
            ${{ steps.ecr-repo.outputs.repository }}:${{ github.sha }}
            ${{ steps.ecr-repo.outputs.repository }}:production-${{ github.run_number }}
            ${{ steps.ecr-repo.outputs.repository }}:v${{ github.run_number }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f apps/backend/.env

      - name: Update ECS Service
        run: |
          echo "Updating ECS service for production environment..."

          aws ecs update-service \
            --cluster wnp-backend-cluster-production \
            --service wnp-backend-service-production \
            --force-new-deployment \
            --region us-east-1

          echo "ECS service update initiated"

          echo "Waiting for production service to stabilize..."
          aws ecs wait services-stable \
            --cluster wnp-backend-cluster-production \
            --services wnp-backend-service-production \
            --region us-east-1 \
            --cli-read-timeout 1200 \
            --cli-connect-timeout 60

      - name: Verify Deployment
        run: |
          echo "Checking production service status..."
          aws ecs describe-services \
            --cluster wnp-backend-cluster-production \
            --services wnp-backend-service-production \
            --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}' \
            --output table

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🚀 Image deployed: ${{ steps.ecr-repo.outputs.repository }}:${{ github.sha }}"
          echo "📦 Build number: production-${{ github.run_number }}"
          echo "🏷️ Version tag: v${{ github.run_number }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Please check the logs and verify your AWS configuration."
